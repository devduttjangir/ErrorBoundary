{"version":3,"sources":["Buggy.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Buggy","props","state","counter","handleClick","bind","this","setState","Error","onClick","React","Component","ErrorBoundary","hasError","error","errorInfo","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0NAuBeA,E,kDArBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,QAAS,GACxB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHF,E,0DAOjBC,KAAKC,UAAS,kBAAkB,CAC9BJ,QADY,EAAGA,QACI,Q,+BAKrB,GAA2B,IAAvBG,KAAKJ,MAAMC,QAEb,MAAM,IAAIK,MAAM,cAElB,OAAO,wBAAIC,QAASH,KAAKF,aAAcE,KAAKJ,MAAMC,a,GAlBlCO,IAAMC,WC2DXC,E,kDA3Bb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEW,UAAU,EAAOC,MAAO,KAAMC,UAAW,MAFvC,E,8DAQDD,EAAOC,M,+BAUvB,OAAIT,KAAKJ,MAAMW,SAEN,qDAGFP,KAAKL,MAAMe,Y,gDAnBYF,GAE9B,MAAO,CAAED,UAAU,O,GAPKH,IAAMC,WCSnBM,MAtCf,WACE,OACE,6BACE,2BACE,iFAEE,6BACA,6BAHF,iDAKE,6BALF,4GAUF,6BACA,kBAAC,EAAD,KACE,mJAIA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,6BACA,4IAIA,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,KACE,kBAAC,EAAD,SCvBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLqB,QAAQrB,MAAMA,EAAMsB,a","file":"static/js/main.0c6f39d6.chunk.js","sourcesContent":["import React from \"react\";\nclass Buggy extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(({ counter }) => ({\n      counter: counter + 1,\n    }));\n  }\n\n  render() {\n    if (this.state.counter === 5) {\n      // Simulate a JS error\n      throw new Error(\"I crashed!\");\n    }\n    return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;\n  }\n}\n\nexport default Buggy;\n","import React, { Component } from \"react\";\n\n// class ErrorBoundary extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { error: null, errorInfo: null };\n//   }\n\n//   componentDidCatch(error, errorInfo) {\n//     this.setState({\n//       error: error,\n//       errorInfo: errorInfo,\n//     });\n//   }\n//   render() {\n//     console.log(this.state);\n//     if (this.state.errorInfo) {\n//       return (\n//         <div>\n//           <h2>Something went wrong.</h2>\n//           <details style={{ whiteSpace: \"pre-wrap\" }}>\n//             {this.state.error && this.state.error.toString()}\n//             <br />\n//             {this.state.errorInfo.componentStack}\n//           </details>\n//         </div>\n//       );\n//     } else {\n//       return this.props.children;\n//     }\n//   }\n//}\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null, errorInfo: null };\n  }\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    // this.setState({\n    //   error: error,\n    //   errorInfo: errorInfo,\n    // });\n    // You can also log error messages to an error reporting service here\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from \"react\";\nimport Buggy from \"./Buggy\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nfunction App() {\n  return (\n    <div>\n      <p>\n        <b>\n          This is an example of error boundaries in React 16.\n          <br />\n          <br />\n          Click on the numbers to increase the counters.\n          <br />\n          The counter is programmed to throw when it reaches 5. This simulates a\n          JavaScript error in a component.\n        </b>\n      </p>\n      <hr />\n      <ErrorBoundary>\n        <p>\n          These two counters are inside the same error boundary. If one crashes,\n          the error boundary will replace both of them.\n        </p>\n        <Buggy />\n        <Buggy />\n      </ErrorBoundary>\n      <hr />\n      <p>\n        These two counters are each inside of their own error boundary. So if\n        one crashes, the other is not affected.\n      </p>\n      <ErrorBoundary>\n        <Buggy />\n      </ErrorBoundary>\n      <ErrorBoundary>\n        <Buggy />\n      </ErrorBoundary>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}